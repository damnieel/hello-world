<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.moon.vip.application.assignment.HomeworkSqlMapper" >
  <resultMap id="BaseResultMap" type="com.moon.vip.model.assignment.SchoolAssignmentClass" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Wed Dec 23 15:57:22 CST 2015.
    -->
    <id column="ID" property="id" jdbcType="INTEGER" />
    <result column="profession_id" property="professionId" jdbcType="INTEGER" />
    <result column="class_id" property="classId" jdbcType="INTEGER" />
    <result column="check_date" property="checkDate" jdbcType="DATE" />
    <result column="submit_number" property="submitNumber" jdbcType="INTEGER" />
    <result column="hiatus_number" property="hiatusNumber" jdbcType="INTEGER" />
    <result column="note" property="note" jdbcType="VARCHAR" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="creator" property="creator" jdbcType="VARCHAR" />
    <result column="modify_time" property="modifyTime" jdbcType="TIMESTAMP" />
    <result column="modify_user" property="modifyUser" jdbcType="VARCHAR" />
    <result column="version" property="version" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Base_Column_List" >
   ID, profession_id, class_id,  check_date, submit_number, hiatus_number, note, create_time, creator, 
    modify_time, modify_user, version
  </sql>
	
  <!-- date:20151224
       author:lqc
       function:查询班级信息，通过部门专业班级id和搜索关键字
   -->
  <select id="findClassInfoByOrgProCalIdAndKey" resultType="com.moon.vip.infra.vo.homework.ClassAndTeacherVO" parameterType="com.moon.vip.infra.vo.search.SearchParamsWithDept">
    	select 
				n.classId opClaId,
				n.opClaName,
				n.teacherId,
				n.teacherCode,
				n.teacherName,
				n.teacherNick,
				n.adviserId,
				n.adviserCode,
				n.adviserName,
				n.adviserNick,
		        m.id opProId,
		        m.`name` opProName
		from
		(
			select t.id classId,
				   t.`type`,
				   t.`name` opClaName,
		           t.partent_id  ,
				   cmg.id teacherId,
				   cmg.employee_code teacherCode,
				   cmg.`name` teacherName,
				   cmg.nick_name teacherNick,
				   adv.id adviserId,
				   adv.employee_code adviserCode,
				   adv.`name` adviserName,
				   adv.nick_name adviserNick
			  from vip_organizational_professional t
				   join (select a.id,a.op_id,a.employee_code,b.`name`,b.nick_name,a.`type`
								from vip_OP_manager a 
									 join vip_employee_base b 
										  on a.employee_code = b.employee_code
								where a.`type`='teacher'
							  ) cmg on (t.id = cmg.op_id)
				   join (select a.id,a.op_id,a.employee_code,b.`name`,b.nick_name,a.`type`  
								from vip_OP_manager a 
									 join vip_employee_base b 
										  on a.employee_code = b.employee_code
							  where a.`type`='adviser'
							  ) adv on (t.id = adv.op_id)
				   JOIN ( SELECT cls.id clsId,cls.`name`,dep.id depId,pro.id proId,cla.id claId
							FROM vip_organizational_professional cls 
								 LEFT JOIN vip_organizational_professional dep on (cls.id = dep.partent_id and dep.is_valid = 'Y')
								 LEFT JOIN vip_organizational_professional pro on (dep.id = pro.partent_id and pro.is_valid = 'Y')
								 LEFT JOIN vip_organizational_professional cla on (pro.id = cla.partent_id and cla.is_valid = 'Y')
						   WHERE cls.is_valid = 'Y'
						         <if test="orgProCalId == 0 or orgProCalId == 1">
							     AND cls.partent_id = 1
							     </if> 
							     <if test="orgProCalId != 0 and orgProCalId != 1">
							     AND cls.id = #{orgProCalId,jdbcType=INTEGER}
							     </if>
                         )o on (o.clsId = t.id or o.depId =t.id or o.proId = t.id or o.claId = t.id) 
			 where t.`type`='cla'
				   and t.is_valid = 'Y'
				   and IFNULL(t.is_end,'N') != 'Y'
				   <if test="opClaIds != null">
				   and t.id in 
						 <foreach collection="opClaIds" item="Id" index="index"
		      					open="(" close=")" separator=","> 
		      					 #{Id}
		                 </foreach>
				   </if>
		)n join vip_organizational_professional m
		on n.partent_id = m.id
		<if test="searchKey != null">
		where (
			    n.teacherName like CONCAT('%',#{searchKey,jdbcType=VARCHAR},'%')
				or n.teacherNick like CONCAT('%',#{searchKey,jdbcType=VARCHAR},'%') 
				or n.teacherCode like CONCAT('%',#{searchKey,jdbcType=VARCHAR},'%') 
		        or n.adviserName like CONCAT('%',#{searchKey,jdbcType=VARCHAR},'%')
				or n.adviserNick like CONCAT('%',#{searchKey,jdbcType=VARCHAR},'%')
				or n.adviserCode like CONCAT('%',#{searchKey,jdbcType=VARCHAR},'%')
			   )
		</if>
  </select>
  
  <select id="getCountClassInfoByOrgProCalIdAndKey" resultType="java.lang.Integer" parameterType="com.moon.vip.infra.vo.search.SearchParamsWithDept">
    	select 
				count(classId)
		from
		(
			select t.id classId,
				   t.`type`,
				   t.`name` opClaName,
		           t.partent_id  ,
				   cmg.id teacherId,
				   cmg.employee_code teacherCode,
				   cmg.`name` teacherName,
				   cmg.nick_name teacherNick,
				   adv.id adviserId,
				   adv.employee_code adviserCode,
				   adv.`name` adviserName,
				   adv.nick_name adviserNick
			  from vip_organizational_professional t
				   join (select a.id,a.op_id,a.employee_code,b.`name`,b.nick_name,a.`type`
								from vip_OP_manager a 
									 join vip_employee_base b 
										  on a.employee_code = b.employee_code
								where a.`type`='teacher'
							  ) cmg on (t.id = cmg.op_id)
				   join (select a.id,a.op_id,a.employee_code,b.`name`,b.nick_name,a.`type`  
								from vip_OP_manager a 
									 join vip_employee_base b 
										  on a.employee_code = b.employee_code
							  where a.`type`='adviser'
							  ) adv on (t.id = adv.op_id)
				   JOIN ( SELECT cls.id clsId,cls.`name`,dep.id depId,pro.id proId,cla.id claId
							FROM vip_organizational_professional cls 
								 LEFT JOIN vip_organizational_professional dep on (cls.id = dep.partent_id and dep.is_valid = 'Y')
								 LEFT JOIN vip_organizational_professional pro on (dep.id = pro.partent_id and pro.is_valid = 'Y')
								 LEFT JOIN vip_organizational_professional cla on (pro.id = cla.partent_id and cla.is_valid = 'Y')
						   WHERE cls.is_valid = 'Y' 
								 <if test="orgProCalId == 0 or orgProCalId == 1">
							     AND cls.partent_id = 1
							     </if> 
							     <if test="orgProCalId != 0 and orgProCalId != 1">
							     AND cls.id = #{orgProCalId,jdbcType=INTEGER}
							     </if>
                         )o on (o.clsId = t.id or o.depId =t.id or o.proId = t.id or o.claId = t.id) 
			 where t.`type`='cla'
			   and t.is_valid = 'Y'
			   and IFNULL(t.is_end,'N') != 'Y'
			   <if test="opClaIds != null">
			   and t.id in 
					 <foreach collection="opClaIds" item="Id" index="index"
	      					open="(" close=")" separator=","> 
	      					 #{Id}
	                 </foreach>
			   </if>
		)n join vip_organizational_professional m
		on n.partent_id = m.id
		<if test="searchKey != null">
		where (
			    n.teacherName like CONCAT('%',#{searchKey,jdbcType=VARCHAR},'%')
				or n.teacherNick like CONCAT('%',#{searchKey,jdbcType=VARCHAR},'%') 
				or n.teacherCode like CONCAT('%',#{searchKey,jdbcType=VARCHAR},'%') 
		        or n.adviserName like CONCAT('%',#{searchKey,jdbcType=VARCHAR},'%')
				or n.adviserNick like CONCAT('%',#{searchKey,jdbcType=VARCHAR},'%')
				or n.adviserCode like CONCAT('%',#{searchKey,jdbcType=VARCHAR},'%')
			   )
		</if>
  </select>
  
  <select id="findClassInfoByOrgProCalIdAndKeyPage" resultType="com.moon.vip.infra.vo.homework.ClassAndTeacherVO" parameterType="com.moon.vip.infra.vo.search.SearchParamsWithDept">
    	select 
				n.classId opClaId,
				n.opClaName,
				n.teacherId,
				n.teacherCode,
				n.teacherName,
				n.teacherNick,
				n.adviserId,
				n.adviserCode,
				n.adviserName,
				n.adviserNick,
		        m.id opProId,
		        m.`name` opProName
		from
		(
			select t.id classId,
				   t.`type`,
				   t.`name` opClaName,
		           t.partent_id  ,
				   cmg.id teacherId,
				   cmg.employee_code teacherCode,
				   cmg.`name` teacherName,
				   cmg.nick_name teacherNick,
				   adv.id adviserId,
				   adv.employee_code adviserCode,
				   adv.`name` adviserName,
				   adv.nick_name adviserNick
			  from vip_organizational_professional t
				   join (select a.id,a.op_id,a.employee_code,b.`name`,b.nick_name,a.`type`
								from vip_OP_manager a 
									 join vip_employee_base b 
										  on a.employee_code = b.employee_code
								where a.`type`='teacher'
							  ) cmg on (t.id = cmg.op_id)
				   join (select a.id,a.op_id,a.employee_code,b.`name`,b.nick_name,a.`type`  
								from vip_OP_manager a 
									 join vip_employee_base b 
										  on a.employee_code = b.employee_code
							  where a.`type`='adviser'
							  ) adv on (t.id = adv.op_id)
				   JOIN ( SELECT cls.id clsId,cls.`name`,dep.id depId,pro.id proId,cla.id claId
							FROM vip_organizational_professional cls 
								 LEFT JOIN vip_organizational_professional dep on (cls.id = dep.partent_id and dep.is_valid = 'Y')
								 LEFT JOIN vip_organizational_professional pro on (dep.id = pro.partent_id and pro.is_valid = 'Y')
								 LEFT JOIN vip_organizational_professional cla on (pro.id = cla.partent_id and cla.is_valid = 'Y')
						   WHERE cls.is_valid = 'Y' 
								<if test="orgProCalId == 0 or orgProCalId == 1">
							     AND cls.partent_id = 1
							     </if> 
							     <if test="orgProCalId != 0 and orgProCalId != 1">
							     AND cls.id = #{orgProCalId,jdbcType=INTEGER}
							     </if>
                         )o on (o.clsId = t.id or o.depId =t.id or o.proId = t.id or o.claId = t.id) 
			 where t.`type`='cla'
			   and t.is_valid = 'Y'
			   and IFNULL(t.is_end,'N') != 'Y'
			   <if test="opClaIds != null">
			   and t.id in 
					 <foreach collection="opClaIds" item="Id" index="index"
	      					open="(" close=")" separator=","> 
	      					 #{Id}
	                 </foreach>
			   </if>
			   
		)n join vip_organizational_professional m
		on n.partent_id = m.id
		<if test="searchKey != null">
		where (
			    n.teacherName like CONCAT('%',#{searchKey,jdbcType=VARCHAR},'%')
				or n.teacherNick like CONCAT('%',#{searchKey,jdbcType=VARCHAR},'%') 
				or n.teacherCode like CONCAT('%',#{searchKey,jdbcType=VARCHAR},'%') 
		        or n.adviserName like CONCAT('%',#{searchKey,jdbcType=VARCHAR},'%')
				or n.adviserNick like CONCAT('%',#{searchKey,jdbcType=VARCHAR},'%')
				or n.adviserCode like CONCAT('%',#{searchKey,jdbcType=VARCHAR},'%')
			   )
		</if>
		order by opClaId DESC
		limit #{startNumber,jdbcType=INTEGER},#{pageSize,jdbcType=INTEGER}
  </select>
  
   <select id="getCountAllHmworkRecordByClassId" resultType="java.lang.Integer" parameterType="com.moon.vip.infra.vo.search.SearchParamsWithDept">
         select 
          		count(ID)
           from vip_school_assignment_class
    	  where class_id = #{orgProCalId,jdbcType=INTEGER}
  </select>
  
  <select id="findAllHmworkRecordByClassIdPage" resultMap="BaseResultMap" parameterType="com.moon.vip.infra.vo.search.SearchParamsWithDept">
         select 
          <include refid="Base_Column_List" />
          from vip_school_assignment_class
    	 where class_id = #{orgProCalId,jdbcType=INTEGER}
    	 order by check_date DESC
    	 limit #{startNumber,jdbcType=INTEGER},#{pageSize,jdbcType=INTEGER}
  </select>
  
  <insert id="insertSAClassSelective"  keyProperty="id" useGeneratedKeys="true" parameterType="com.moon.vip.model.assignment.SchoolAssignmentClass" >
    insert into vip_school_assignment_class
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        ID,
      </if>
      <if test="professionId != null" >
        profession_id,
      </if>
      <if test="classId != null" >
        class_id,
      </if>
      <if test="checkDate != null" >
        check_date,
      </if>
      <if test="submitNumber != null" >
        submit_number,
      </if>
       <if test="hiatusNumber != null" >
        hiatus_number,
      </if>
      <if test="note != null" >
        note,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="creator != null" >
        creator,
      </if>
      <if test="modifyTime != null" >
        modify_time,
      </if>
      <if test="modifyUser != null" >
        modify_user,
      </if>
      <if test="version != null" >
        version,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="professionId != null" >
        #{professionId,jdbcType=INTEGER},
      </if>
      <if test="classId != null" >
        #{classId,jdbcType=INTEGER},
      </if>
      <if test="checkDate != null" >
        #{checkDate,jdbcType=DATE},
      </if>
      <if test="submitNumber != null" >
        #{submitNumber,jdbcType=INTEGER},
      </if>
       <if test="hiatusNumber != null" >
        #{hiatusNumber,jdbcType=INTEGER},
      </if>
      <if test="note != null" >
        #{note,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="creator != null" >
        #{creator,jdbcType=VARCHAR},
      </if>
      <if test="modifyTime != null" >
        #{modifyTime,jdbcType=TIMESTAMP},
      </if>
      <if test="modifyUser != null" >
        #{modifyUser,jdbcType=VARCHAR},
      </if>
      <if test="version != null" >
        #{version,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateSAClassByPrimaryKeySelective" parameterType="com.moon.vip.model.assignment.SchoolAssignmentClass" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Wed Dec 23 15:57:22 CST 2015.
    -->
    update vip_school_assignment_class
    <set >
      <if test="professionId != null" >
        profession_id = #{professionId,jdbcType=INTEGER},
      </if>
      <if test="classId != null" >
        class_id = #{classId,jdbcType=INTEGER},
      </if>
      <if test="checkDate != null" >
        check_date = #{checkDate,jdbcType=DATE},
      </if>
      <if test="submitNumber != null" >
        submit_number = #{submitNumber,jdbcType=INTEGER},
      </if>
       <if test="hiatusNumber != null" >
        hiatus_number = #{hiatusNumber,jdbcType=INTEGER},
      </if>
       <if test="note != null" >
        note = #{note,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="creator != null" >
        creator = #{creator,jdbcType=VARCHAR},
      </if>
      <if test="modifyTime != null" >
        modify_time = #{modifyTime,jdbcType=TIMESTAMP},
      </if>
      <if test="modifyUser != null" >
        modify_user = #{modifyUser,jdbcType=VARCHAR},
      </if>
      <if test="version != null" >
        version = #{version,jdbcType=INTEGER},
      </if>
    </set>
    where ID = #{id,jdbcType=INTEGER}
  </update>
  
   <select id="getCountSADetailBySacId" resultType="java.lang.Integer">
          select count(1)
			from vip_school_assignment_detail t
			join vip_school_assignment_class s on(t.sac_id = s.id)
			join vip_student_professional o on (t.student_id = o.student_id and s.profession_id = o.op_pro_id)
			join vip_student_archives p on (t.student_id = p.id)
          where t.sac_id = #{sacId,jdbcType=INTEGER} AND t.is_valid = 'Y';
  </select>
  
  <select id="findSADetailBySacIds" resultType="com.moon.vip.infra.vo.homework.StudentHmworkVO">
          select t.ID id, t.sac_id sacId, t.student_id studentId,
                 t.check_status checkStatus, o.profession_code professionCode,
                 p.`name` studentName, p.nick_name nickName
			from vip_school_assignment_detail t
			join vip_school_assignment_class s on(t.sac_id = s.id)
			join vip_student_professional o on (t.student_id = o.student_id and s.profession_id = o.op_pro_id)
			join vip_student_archives p on (t.student_id = p.id)
          where t.sac_id in (
           <foreach collection="list" item="sacId" index="index" separator="," >  
            #{sacId,jdbcType=INTEGER}
            </foreach>
            )
             AND t.is_valid = 'Y';
  </select>
  
  <insert id="insertSADetailSelectiveBatch" parameterType="com.moon.vip.model.assignment.SchoolAssignmentDetail" useGeneratedKeys="true" >
    <selectKey resultType="long" keyProperty="id" order="AFTER">  
        SELECT  
        LAST_INSERT_ID()  
    </selectKey>  
    
	    insert into vip_school_assignment_detail
	    (ID, sac_id, student_id, check_status, create_time, creator, modify_time, modify_user, version)
	    values
	    <foreach collection="list" item="asign" index="index" separator="," >  
	       (
	        #{asign.id,jdbcType=INTEGER},
	        #{asign.sacId,jdbcType=INTEGER},
	        #{asign.studentId,jdbcType=INTEGER},
	        #{asign.checkStatus,jdbcType=INTEGER},
	        #{asign.createTime,jdbcType=TIMESTAMP},
	        #{asign.creator,jdbcType=VARCHAR},
	        #{asign.modifyTime,jdbcType=TIMESTAMP},
	        #{asign.modifyUser,jdbcType=VARCHAR},
	        #{asign.version,jdbcType=INTEGER}
	       )
      </foreach>  
  </insert>
  
  <delete id="deleteHmworkRecordByClassIdAndCheckDate" >
        delete from vip_school_assignment_class
         where class_id = #{classId,jdbcType=INTEGER}
               and check_date = #{checkDate,jdbcType=DATE}
  </delete>
  
  <delete id="deleteHmworkRecordById">
 	    delete from vip_school_assignment_class
         where ID = #{id,jdbcType=INTEGER}
  </delete>
  
  <delete id="deleteHmworkDetailBySacId">
   		delete from vip_school_assignment_detail
         where sac_id = #{sacId,jdbcType=INTEGER}
  </delete>
  
  <select id="getCountSearchLackHmworkStudent" resultType="java.lang.Integer" parameterType="com.moon.vip.infra.vo.search.LackHmworkSearchParams">
      select count(1)
      from
	      (
	       select m.student_id studentId,
		       m.profession_id professionId,
		       o.profession_code professionCode,
		       p.`name` name,
		       m.`name` claName,
		       p.nick_name nickName,
		       p.telephone telephone,
		       p.QQ qq,
		       count(m.student_id) lackNumber
		  from (
			select t.student_id,
				   s.class_id,
		           s.profession_id,
			  	   org.`name`
			  from vip_school_assignment_detail t
			  join vip_school_assignment_class s on(t.sac_id = s.id)
              join vip_organizational_professional org on(s.class_id = org.id and org.type='cla')
			 where t.check_status = 0 AND t.is_valid = 'Y'
			      <if test="startDate != null and endDate != null">
				   and s.check_date <![CDATA[>=]]> #{startDate,jdbcType=DATE}
				   and s.check_date <![CDATA[<]]> #{endDate,jdbcType=DATE}
				  </if>
				  <if test="opClaIds != null">
				   and s.class_id in
						  <foreach collection="opClaIds" item="Id" index="index"
           					 open="(" close=")" separator=","> 
           					  #{Id}
   		                  </foreach>
				  </if>
			) m  
			JOIN ( SELECT cls.id clsId,cls.`name`,dep.id depId,pro.id proId,cla.id claId
					 FROM vip_organizational_professional cls 
						 LEFT JOIN vip_organizational_professional dep on (cls.id = dep.partent_id and dep.is_valid = 'Y' and IFNULL(dep.is_end,'N') != 'Y')
						 LEFT JOIN vip_organizational_professional pro on (dep.id = pro.partent_id and pro.is_valid = 'Y' and IFNULL(pro.is_end,'N') != 'Y')
						 LEFT JOIN vip_organizational_professional cla on (pro.id = cla.partent_id and cla.is_valid = 'Y' and IFNULL(cla.is_end,'N') != 'Y')
				   WHERE cls.is_valid = 'Y' 
				         AND IFNULL(cls.is_end,'N') != 'Y'
						 <if test="orgProCalId == 0 or orgProCalId == 1">
					     AND cls.partent_id = 1
					     </if> 
					     <if test="orgProCalId != 0 and orgProCalId != 1">
					     AND cls.id = #{orgProCalId,jdbcType=INTEGER}
					     </if>
                 ) n on (n.clsId = m.class_id or n.depId = m.class_id or n.proId = m.class_id or n.claId = m.class_id) 
		    join vip_student_professional o on (m.student_id = o.student_id and m.profession_id = o.op_pro_id)
		    join vip_student_archives p on (m.student_id = p.id)
		    group by m.student_id,
		             m.profession_id,
		             o.profession_code,
					 p.`name`,
					 m.`name`,
					 p.nick_name,
		             p.telephone,
		             p.QQ
		    <if test="lackNumber != 0">
		    having count(m.student_id) <![CDATA[>=]]> #{lackNumber,jdbcType=INTEGER}
		    </if>
		    )e
		<if test="searchKey != null">
		where (
			    e.name like CONCAT('%',#{searchKey,jdbcType=VARCHAR},'%') or
				e.professionCode like CONCAT('%',#{searchKey,jdbcType=VARCHAR},'%') or
				e.nickName like CONCAT('%',#{searchKey,jdbcType=VARCHAR},'%') 
			   )
		</if>
  </select>
  
  <select id="searchLackHmworkStudentPage" resultType="com.moon.vip.infra.vo.homework.LackHmworkStudentVO" parameterType="com.moon.vip.infra.vo.search.LackHmworkSearchParams">
      select studentId,
		     professionId,
		     professionCode,
		     claName,
		     name,
		     nickName,
		     telephone,
		     qq,
		     lackNumber
      from
	      (
	       select m.student_id studentId,
		       m.profession_id professionId,
		       o.profession_code professionCode,
		       m.`name` claName,
		       p.`name` name,
		       p.nick_name nickName,
		       p.telephone telephone,
		       p.QQ qq,
		       count(m.student_id) lackNumber
		  from (
			select t.student_id,
				   s.class_id,
		           s.profession_id,
			       org.`name`
			  from vip_school_assignment_detail t
			  join vip_school_assignment_class s on(t.sac_id = s.id)
              join vip_organizational_professional org on(s.class_id = org.id and org.type='cla')
			 where t.check_status = 0 AND t.is_valid = 'Y'
			      <if test="startDate != null and endDate != null">
				   and s.check_date <![CDATA[>=]]> #{startDate,jdbcType=DATE}
				   and s.check_date <![CDATA[<]]> #{endDate,jdbcType=DATE}
				  </if>
				  <if test="opClaIds != null">
				   and s.class_id in
						  <foreach collection="opClaIds" item="Id" index="index"
           					 open="(" close=")" separator=","> 
           					  #{Id}
   		                  </foreach>
				  </if>
			) m  
			JOIN ( SELECT cls.id clsId,cls.`name`,dep.id depId,pro.id proId,cla.id claId
					 FROM vip_organizational_professional cls 
						 LEFT JOIN vip_organizational_professional dep on (cls.id = dep.partent_id and dep.is_valid = 'Y' and IFNULL(dep.is_end,'N') != 'Y')
						 LEFT JOIN vip_organizational_professional pro on (dep.id = pro.partent_id and pro.is_valid = 'Y' and IFNULL(pro.is_end,'N') != 'Y')
						 LEFT JOIN vip_organizational_professional cla on (pro.id = cla.partent_id and cla.is_valid = 'Y' and IFNULL(cla.is_end,'N') != 'Y')
				   WHERE cls.is_valid = 'Y' 
				         AND IFNULL(cls.is_end,'N') != 'Y'
						 <if test="orgProCalId == 0 or orgProCalId == 1">
					     AND cls.partent_id = 1
					     </if> 
					     <if test="orgProCalId != 0 and orgProCalId != 1">
					     AND cls.id = #{orgProCalId,jdbcType=INTEGER}
					     </if>
                 ) n on (n.clsId = m.class_id or n.depId = m.class_id or n.proId = m.class_id or n.claId = m.class_id) 
		    join vip_student_professional o on (m.student_id = o.student_id and m.profession_id = o.op_pro_id)
		    join vip_student_archives p on (m.student_id = p.id)
		    group by m.student_id,
		             m.profession_id,
		             o.profession_code,
					 p.`name`,
					 m.`name`,
					 p.nick_name,
		             p.telephone,
		             p.QQ
		    <if test="lackNumber != 0">
		    having count(m.student_id) <![CDATA[>=]]> #{lackNumber,jdbcType=INTEGER}
		    </if>
		    ) e
		<if test="searchKey != null">
		where (
			    e.name like CONCAT('%',#{searchKey,jdbcType=VARCHAR},'%') or
				e.professionCode like CONCAT('%',#{searchKey,jdbcType=VARCHAR},'%') or
				e.nickName like CONCAT('%',#{searchKey,jdbcType=VARCHAR},'%')
			   )
		</if>
	    order by lackNumber DESC
	    limit #{startNumber,jdbcType=INTEGER},#{pageSize,jdbcType=INTEGER}
  </select>
  
  <select id="findStudentsByClassId" resultType="com.moon.vip.infra.vo.homework.StudentHmworkVO">
		select m.student_id studentId,
		       m.op_cla_id sacId,
		       o.profession_code professionCode,
		       p.name studentName,
		       0 checkStatus
		 from vip_student_class m
		join vip_student_professional o on (m.student_id = o.student_id and m.op_pro_id = o.op_pro_id)
		join vip_student_archives p on (m.student_id = p.id)
		where m.is_valid='Y'
			  and IFNULL(o.status,'reading') not in('drop','pause')
			  and o.is_valid = 'Y'
		      and m.op_cla_id = #{classId,jdbcType=INTEGER}
  </select>
</mapper>